{
	"info": {
		"_postman_id": "08bc3684-f295-4744-92a7-dcb4b4f50ca2",
		"name": "HW3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "http://162.55.220.72:5005/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//pm.test(\"status code is 200\", function(){\r",
							"//    pm.expect(pm.response.code).to.eql(200)\r",
							"//})\r",
							"var jsonDataResponse = pm.response.json();\r",
							"var jsonDataRequest = request.data;\r",
							"console.log(\"jsonDataRequest =\", jsonDataRequest)\r",
							"pm.environment.set(\"key\", jsonDataResponse.token)\r",
							"pm.environment.set(\"login\", jsonDataRequest.login)\r",
							"pm.environment.set(\"password\", jsonDataRequest.password)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "nikolay",
							"type": "text"
						},
						{
							"key": "password",
							"value": "nik",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code 200\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"})\r",
							"//2) Проверка структуры json в ответе.\r",
							"const scheme = {  \r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\"type\": \"string\"},\r",
							"            {\"type\": \"integer\"},\r",
							"            {\"type\": \"integer\"}\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"Test 2. Проверка структуры json в ответе.\", () => {\r",
							"pm.response.to.have.jsonSchema(scheme);\r",
							"});\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"var jsonDataResponse = pm.response.json();\r",
							"var jsonDataRequest = JSON.parse(request.data);\r",
							"\r",
							"\r",
							"pm.test(\"Test 3.1(start_qa_salary). Напишите тесты по проверке правильности результата перемножения на коэффициент\", function(){\r",
							"    pm.expect(jsonDataResponse.start_qa_salary).to.eql(+jsonDataRequest.salary)\r",
							"})\r",
							"pm.test(\"Test 3.2 (qa_salary_after_6_months). Напишите тесты по проверке правильности результата перемножения на коэффициент\", function(){\r",
							"    pm.expect(jsonDataResponse.qa_salary_after_6_months).to.eql(jsonDataRequest.salary*2)\r",
							"})\r",
							"pm.test(\"Test 3.3 (qa_salary_after_12_months). Напишите тесты по проверке правильности результата перемножения на коэффициент\", function(){\r",
							"    pm.expect(jsonDataResponse.qa_salary_after_12_months).to.eql(jsonDataRequest.salary*2.9)\r",
							"})\r",
							"console.log(jsonDataResponse.person.u_salary_1_5_year)\r",
							"\r",
							"//4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"pm.environment.set(\"hw3_test2_u_salary_1.5_year\", jsonDataResponse.person.u_salary_1_5_year);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Test1. Статус код 200\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"})\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"var scheme = {  \r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Test2. Проверка структуры json в ответе.\", ()=>{\r",
							"    pm.response.to.have.jsonSchema(scheme)\r",
							"})\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var jsonDataResponse = pm.response.json();\r",
							"var jsonDataRequest = request.data;\r",
							"\r",
							"pm.test(\"Test 3.1  salary[0] = salary\", ()=>{\r",
							"    pm.expect(jsonDataResponse.salary[0]).to.eql(+jsonDataRequest.salary)\r",
							"})\r",
							"\r",
							"pm.test(\"Test 3.2  salary[1] = salary*2\", ()=>{\r",
							"    pm.expect(+jsonDataResponse.salary[1]).to.eql(jsonDataRequest.salary*2)\r",
							"})\r",
							"\r",
							"pm.test(\"Test 3.3  salary[2] = salary*3\", ()=>{\r",
							"    pm.expect(+jsonDataResponse.salary[2]).to.eql(jsonDataRequest.salary*3)\r",
							"})\r",
							"//4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"\r",
							"pm.test(\"Test 4.1 - 2-й элемент массива salary больше 1-го\", ()=>{\r",
							"    pm.expect(+jsonDataResponse.salary[2]).to.least(+jsonDataResponse.salary[1])\r",
							"})\r",
							"pm.test(\"Test 4.2 - 2-й элемент массива salary больше 0-го\", ()=>{\r",
							"    pm.expect(+jsonDataResponse.salary[2]).to.least(+jsonDataResponse.salary[0])\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{key}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Test 1.\", ()=>{\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"})\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"var scheme = {\"type\": \"object\",\r",
							"  \t\"properties\":{\r",
							"  \t\t\"age\":{\r",
							"        \t\"type\":\"integer\"},\r",
							"      \t\"daily_food\":{\r",
							"        \t\"type\":\"number\"},\r",
							"      \t\"daily_sleep\":{\r",
							"        \t\"type\":\"number\"},\r",
							"      \t\"name\":{\r",
							"        \t\"type\":\"string\"}\r",
							"    },\r",
							" \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"Test 2. Проверка структуры json в ответе.\", ()=>{\r",
							"    pm.response.to.have.jsonSchema(scheme)\r",
							"})\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"var jsonDataRespons = pm.response.json();\r",
							"var jsonDataRequest = request.data;\r",
							"\r",
							"pm.test(\"Test 3.1 Проверить коэффициенты умножения 'daily_food':weight * 0.012\", ()=>{\r",
							"    pm.expect(jsonDataRequest.weight*0.012).to.eql(jsonDataRespons.daily_food)\r",
							"})\r",
							"\r",
							"pm.test(\"Test 3.2 Проверить коэффициенты умножения 'daily_sleep': weight * 2.5\", ()=>{\r",
							"    pm.expect(jsonDataRequest.weight*2.5).to.eql(jsonDataRespons.daily_sleep)\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "75",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{key}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Test 1. Статус код 200\", ()=>{\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"})\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"var scheme = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Test 2. Проверка структуры json в ответе.\", ()=>{\r",
							"    pm.response.to.have.jsonSchema(scheme)\r",
							"})\r",
							"\r",
							"//3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"var jsonDataRespons = pm.response.json();\r",
							"var name = pm.environment.get(\"name\")\r",
							"pm.test(\"Test 3. занчение поля name = значению переменной name из окружения\", function(){\r",
							"    pm.expect(jsonDataRespons.name).to.eql(name)\r",
							"})\r",
							"\r",
							"//4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"var jsonDataRequest = request.data;\r",
							"pm.test(\"Test 4. Значение поля age в ответе соответсвует отправленному в запросе значению поля age\", function(){\r",
							"    pm.expect(+jsonDataRespons.age).to.eql(+jsonDataRequest.age)\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{hw3_test2_u_salary_1.5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{key}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"var jsonDataResponse = pm.response.json();\r",
							"//В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"var rnd = _.random(0, jsonDataResponse.length);\r",
							"var Cur_ID = jsonDataResponse[rnd].Cur_ID;\r",
							"pm.environment.set(\"hw3_test6_Cur_ID\", Cur_ID)\r",
							"console.log(\"Cur_ID = \", Cur_ID)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{key}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/currency",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Test 1. Статус код 200\", ()=>{\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"})\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"var scheme = {  \r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Test 2. Проверка структуры json в ответе.\", () => {\r",
							"pm.response.to.have.jsonSchema(scheme);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{key}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{hw3_test6_Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/curr_byn",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/currency***",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//***\r",
							"//1) получить список валют\r",
							"//2) итерировать список валют\r",
							"//3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"//4) если возвращается 500 код, переходим к следующей итреации\r",
							"//5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"//6) если поле есть, пишем в консоль инфу про фалюту в виде response\r",
							"//{\r",
							"//    \"Cur_Abbreviation\": str\r",
							"//    \"Cur_ID\": int,\r",
							"//    \"Cur_Name\": str,\r",
							"//    \"Cur_OfficialRate\": float,\r",
							"//    \"Cur_Scale\": int,\r",
							"//    \"Date\": str\r",
							"//}\r",
							"//7) переходим к следующей итерации\r",
							"\r",
							"var jsonDataResponse = pm.response.json();\r",
							"var key = pm.environment.get(\"key\");\r",
							"\r",
							"for(let k = 0; k < jsonDataResponse.length; k++){\r",
							"        const postRequest = {\r",
							"        url: 'http://162.55.220.72:5005/curr_byn',\r",
							"        method: 'POST', \r",
							"        body: {\r",
							"            mode: 'formdata',\r",
							"            'formdata': [\r",
							"                {'key':'auth_token', 'value': key},\r",
							"                {'key':\"curr_code\", 'value': jsonDataResponse[k].Cur_ID}\r",
							"            ]         \r",
							"        }    \r",
							"    };\r",
							"    \r",
							"    pm.sendRequest(postRequest, (error, resp)=>{        \r",
							"        if (error) throw new Error(error);\r",
							"        if (resp.code == 200) {\r",
							"            var jsonDataResponse_2 = resp.json();\r",
							"            if (jsonDataResponse_2.Cur_OfficialRate){\r",
							"                console.log(jsonDataResponse_2)\r",
							"            }            \r",
							"        } else {\r",
							"            console.log(\"Cur_ID = \", jsonDataResponse[k].Cur_ID, jsonDataResponse[k].Cur_Name, \"= Error\")\r",
							"        }              \r",
							"    });  \r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{key}}",
							"type": "text"
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/currency",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	]
}